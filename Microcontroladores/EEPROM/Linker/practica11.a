;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/10/2018
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define boton PIND.0
;#define boton_guarda PIND.1
;bit botonp;
;bit botona;
;unsigned char var; //Ahora la variable se guarda en eeprom
;const char tabla7segmentos [10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};

	.DSEG
;eeprom char datoaguardar;
;void checa_boton (void); // Aquí se declaran todas las funciones que se van usar
;// Declare your global variables here
;
;void main(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0026 // Declare your local variables here
; 0000 0027 
; 0000 0028 // Input/Output Ports initialization
; 0000 0029 // Port A initialization
; 0000 002A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 002B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 002C PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002D DDRA=0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002E 
; 0000 002F // Port B initialization
; 0000 0030 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0031 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0032 PORTB=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0033 DDRB=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0034 
; 0000 0035 // Port C initialization
; 0000 0036 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0037 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0038 PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0039 DDRC=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003A 
; 0000 003B // Port D initialization
; 0000 003C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003E PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003F DDRD=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0040 
; 0000 0041 // Timer/Counter 0 initialization
; 0000 0042 // Clock source: System Clock
; 0000 0043 // Clock value: Timer 0 Stopped
; 0000 0044 // Mode: Normal top=0xFF
; 0000 0045 // OC0 output: Disconnected
; 0000 0046 TCCR0=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0047 TCNT0=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0048 OCR0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0049 
; 0000 004A // Timer/Counter 1 initialization
; 0000 004B // Clock source: System Clock
; 0000 004C // Clock value: Timer1 Stopped
; 0000 004D // Mode: Normal top=0xFFFF
; 0000 004E // OC1A output: Discon.
; 0000 004F // OC1B output: Discon.
; 0000 0050 // Noise Canceler: Off
; 0000 0051 // Input Capture on Falling Edge
; 0000 0052 // Timer1 Overflow Interrupt: Off
; 0000 0053 // Input Capture Interrupt: Off
; 0000 0054 // Compare A Match Interrupt: Off
; 0000 0055 // Compare B Match Interrupt: Off
; 0000 0056 TCCR1A=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0057 TCCR1B=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0058 TCNT1H=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0059 TCNT1L=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005A ICR1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005B ICR1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 005C OCR1AH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 005D OCR1AL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005E OCR1BH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005F OCR1BL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 2 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: Timer2 Stopped
; 0000 0064 // Mode: Normal top=0xFF
; 0000 0065 // OC2 output: Disconnected
; 0000 0066 ASSR=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0067 TCCR2=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0068 TCNT2=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0069 OCR2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006A 
; 0000 006B // External Interrupt(s) initialization
; 0000 006C // INT0: Off
; 0000 006D // INT1: Off
; 0000 006E // INT2: Off
; 0000 006F MCUCR=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0070 MCUCSR=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0071 
; 0000 0072 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0073 TIMSK=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0074 
; 0000 0075 // USART initialization
; 0000 0076 // USART disabled
; 0000 0077 UCSRB=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0078 
; 0000 0079 // Analog Comparator initialization
; 0000 007A // Analog Comparator: Off
; 0000 007B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 007C ACSR=0x80;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007D SFIOR=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007E 
; 0000 007F // ADC initialization
; 0000 0080 // ADC disabled
; 0000 0081 ADCSRA=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0082 
; 0000 0083 // SPI initialization
; 0000 0084 // SPI disabled
; 0000 0085 SPCR=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0086 
; 0000 0087 // TWI initialization
; 0000 0088 // TWI disabled
; 0000 0089 TWCR=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008A 
; 0000 008B if (datoaguardar>10)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008C datoaguardar=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008D var=datoaguardar;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008E while (1)
;PCODE: $0000005D VOL: 0
; 0000 008F       {
; 0000 0090         checa_boton();
;PCODE: $0000005E VOL: 0
; 0000 0091         PORTA=~tabla7segmentos [var];
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0092         if (boton_guarda==0) //Si se presiona el botón de guardar
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0093             datoaguardar=var; //se grabara la eeprom con el valor de var
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0094       // Place your code here
; 0000 0095 
; 0000 0096       };
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0097 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void checa_boton (void)
; 0000 009A {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009B     if (boton==0)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009C         botona=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009D     else
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009E         botona=1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009F     if ((botonp==1)&&(botona==0)) //hubo cambio de flanco de 1 a 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A0     {
; 0000 00A1         var++; //Se incrementa la variable
;PCODE: $00000089 VOL: 0
; 0000 00A2         if (var>=10)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A3             var=0;
;PCODE: $0000008D VOL: 0
; 0000 00A4             delay_ms(40); //Se coloca retardo de 40mS para eliminar rebotes
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A5     }
; 0000 00A6     if ((botonp==0)&&(botona==1)) //hubo cambio de flanco de 0 a 1
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A7         delay_ms(40); //Se coloca retardo de 40mS para eliminar rebotes
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A8     botonp=botona;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A9 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
