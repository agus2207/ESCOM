
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author agust
 */
public class main_menu extends javax.swing.JFrame {

    /**
     * Creates new form main_menu
     */
    
    String archivo;
    String key;
    String sign;
    FileWriter f1;
    private ImageIcon feliz = new ImageIcon(getClass().getResource("/Iconos/feliz.jpg"));
    private ImageIcon triste = new ImageIcon(getClass().getResource("/Iconos/triste.jpg"));
    private ImageIcon bien = new ImageIcon(getClass().getResource("/Iconos/bien.PNG"));
    private ImageIcon mal = new ImageIcon(getClass().getResource("/Iconos/mal.PNG"));
    //private ImageIcon angry = new ImageIcon(getClass().getResource("/Iconos/angry.png"));
    
    public main_menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Welcome to my cipher program");

        jButton1.setText("Select a file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("What do you want to do?");

        jRadioButton1.setText("Confidentiality");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypt", "Decrypt" }));

        jRadioButton2.setText("Authentication");

        jRadioButton3.setText("Integrity");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Insert a Key");

        jTextField1.setText("***********");

        jButton2.setText("Select a key");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "DES" }));

        jButton3.setText("Select a key");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Run");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Generate keys");
        jButton5.setToolTipText("");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(96, 96, 96))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addGap(40, 40, 40)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton3)
                            .addComponent(jRadioButton3)
                            .addComponent(jButton2)
                            .addComponent(jRadioButton2)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(36, 36, 36)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jButton5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(30, 30, 30)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc=new JFileChooser();
        int seleccion=fc.showOpenDialog(contentPane);
        if(seleccion==JFileChooser.APPROVE_OPTION){
            File fichero=fc.getSelectedFile();
            archivo = (String) fichero.getAbsolutePath();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc=new JFileChooser();
        int seleccion=fc.showOpenDialog(contentPane);
        if(seleccion==JFileChooser.APPROVE_OPTION){
            File fichero=fc.getSelectedFile();
            key = (String) fichero.getAbsolutePath();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc=new JFileChooser();
        int seleccion=fc.showOpenDialog(contentPane);
        if(seleccion==JFileChooser.APPROVE_OPTION){
            File fichero=fc.getSelectedFile();
            sign = (String) fichero.getAbsolutePath();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here: 
        if(jRadioButton1.isSelected() == true){
            RSA r1 = new RSA();
            AES a1 = new AES();
            DES d1 = new DES();
            SHA1 s1 = new SHA1();
            Readfile rf = new Readfile();
            String mode = (String)jComboBox1.getSelectedItem();
            String mode2 = (String)jComboBox2.getSelectedItem();
            if(mode.equals("Encrypt")){
                if(mode2.equals("AES")){
                    if(jRadioButton2.isSelected() == true){
                        try{
                            r1.openFromDiskPublicKey(key);
                            r1.openFromDiskPrivateKey(sign);
                            f1 = new FileWriter("src/Documentos/m_AESe.txt");
                            String tosign = rf.read(archivo);
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 16){
                                int restante = 16-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------AES and Signature------");
                            String hash = s1.hash(tosign);
                            System.out.println("Hash: "+hash);
                            String signature = r1.Sign(hash);
                            System.out.println("Signature: "+signature);
                            String escribir = resultado + "\r\n\r\n" + signature;
                            System.out.println(escribir);
                            String encrypt = a1.AES_Encrypt(escribir, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_AES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = a1.initialvector();
                            System.out.println("IV: "+iv);
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES Encrypt && HASH && Sign Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            //JOptionPane.showMessageDialog(null, "AES Encrypt Successful");
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == true){
                        try{
                            r1.openFromDiskPublicKey(key);
                            f1 = new FileWriter("src/Documentos/m_AESe.txt");
                            String tohash = rf.read(archivo);
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 16){
                                int restante = 16-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------AES and HASH------");
                            String hash = s1.hash(tohash);
                            String escribir = resultado + "\r\n\r\n" + hash;
                            System.out.println(escribir);
                            String encrypt = a1.AES_Encrypt(escribir, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_AES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = a1.initialvector();
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES Encrypt && HASH Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == false){
                        try{
                            r1.openFromDiskPublicKey(key);
                            f1 = new FileWriter("src/Documentos/m_AESe.txt");
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 16){
                                int restante = 16-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------ONLY AES------");
                            String encrypt = a1.AES_Encrypt(resultado, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_AES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = a1.initialvector();
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES Encrypt Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                }
                if(mode2.equals("DES")){
                    if(jRadioButton2.isSelected() == true){
                        try{
                            r1.openFromDiskPublicKey(key);
                            r1.openFromDiskPrivateKey(sign);
                            f1 = new FileWriter("src/Documentos/m_DESe.txt");
                            String tosign = rf.read(archivo);
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 8){
                                int restante = 8-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------DES and Signature------");
                            String hash = s1.hash(tosign);
                            System.out.println("Hash: "+hash);
                            String signature = r1.Sign(hash);
                            System.out.println("Signature: "+signature);
                            String escribir = resultado + "\r\n\r\n" + signature;
                            System.out.println(escribir);
                            String encrypt = d1.DES_Encrypt(escribir, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_DES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = d1.initialvector();
                            System.out.println("IV: "+iv);
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES Encrypt && HASH && Sign Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            //JOptionPane.showMessageDialog(null, "AES Encrypt Successful");
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == true){
                        try{
                            r1.openFromDiskPublicKey(key);
                            f1 = new FileWriter("src/Documentos/m_DESe.txt");
                            String tohash = rf.read(archivo);
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 8){
                                int restante = 8-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------DES and HASH------");
                            String hash = s1.hash(tohash);
                            String escribir = resultado + "\r\n\r\n" + hash;
                            System.out.println(escribir);
                            String encrypt = d1.DES_Encrypt(escribir, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_DES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = d1.initialvector();
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES Encrypt && HASH Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == false){
                        try{
                            r1.openFromDiskPublicKey(key);
                            f1 = new FileWriter("src/Documentos/m_DESe.txt");
                            String resultado = rf.read3(archivo);
                            String llave = (String)jTextField1.getText();
                            if(llave.length() < 8){
                                int restante = 8-llave.length();
                                for(int i = 0; i < restante; i++){
                                    llave += "0";
                                }
                            }
                            System.out.println("-------ONLY DES------");
                            String encrypt = d1.DES_Encrypt(resultado, llave);
                            f1.write(encrypt);
                            f1.close();
                            f1 = new FileWriter("src/Documentos/m_key_iv_DES.txt");
                            String llavec = r1.Encrypt(llave);
                            String iv = d1.initialvector();
                            String ivc = r1.Encrypt(iv);
                            f1.write(llavec);
                            f1.write("\r\n\r\n");
                            f1.write(ivc);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES Encrypt Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                }
            }
            
            if(mode.equals("Decrypt")){
                if(mode2.equals("AES")){
                    if(jRadioButton2.isSelected() == true){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            r1.openFromDiskPublicKey(sign);
                            f1 = new FileWriter("src/Documentos/m_AESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_AES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_AES.txt", count);
                            System.out.println("-------AES and Signature decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = a1.AES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES DECRYPT && HASH && Sign Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            ArrayList<String> verificacion = new ArrayList();
                            count = rf.contar("src/Documentos/m_AESd.txt");
                            verificacion = rf.resandkey("src/Documentos/m_AESd.txt", count);
                            String resultado2 = verificacion.get(0);
                            resultado2 = resultado2.substring(0, resultado2.length()-1);
                            System.out.println(resultado);
                            String signature = verificacion.get(1);
                            System.out.println("Sign: "+signature);
                            String verify = r1.Verify(signature);
                            System.out.println("Hash: "+verify);
                            boolean resp = s1.verify(resultado2, verify);
                            if(resp == true){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                                JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                            }
                            if(resp == false){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                                JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                            }
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == true){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            f1 = new FileWriter("src/Documentos/m_AESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_AES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_AES.txt", count);
                            System.out.println("-------AES and HASH decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = a1.AES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES DECRYPT && HASH", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            ArrayList<String> verificacion = new ArrayList();
                            count = rf.contar("src/Documentos/m_AESd.txt");
                            verificacion = rf.resandkey("src/Documentos/m_AESd.txt", count);
                            String resultado2 = verificacion.get(0);
                            resultado2 = resultado2.substring(0, resultado2.length()-1);
                            System.out.println(resultado);
                            String hash = verificacion.get(1);
                            System.out.println("HASH: "+hash);
                            boolean resp = s1.verify(resultado2, hash);
                            if(resp == true){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                            }
                            if(resp == false){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                            }
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == false){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            f1 = new FileWriter("src/Documentos/m_AESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_AES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_AES.txt", count);
                            System.out.println("-------AES decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = a1.AES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "AES DECRYPT", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                }
                if(mode2.equals("DES")){
                    if(jRadioButton2.isSelected() == true){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            r1.openFromDiskPublicKey(sign);
                            f1 = new FileWriter("src/Documentos/m_DESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_DES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_DES.txt", count);
                            System.out.println("-------DES and Signature decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = d1.DES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES DECRYPT && HASH && Sign Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            ArrayList<String> verificacion = new ArrayList();
                            count = rf.contar("src/Documentos/m_DESd.txt");
                            verificacion = rf.resandkey("src/Documentos/m_DESd.txt", count);
                            String resultado2 = verificacion.get(0);
                            resultado2 = resultado2.substring(0, resultado2.length()-1);
                            System.out.println(resultado);
                            String signature = verificacion.get(1);
                            System.out.println("Sign: "+signature);
                            String verify = r1.Verify(signature);
                            System.out.println("Hash: "+verify);
                            boolean resp = s1.verify(resultado2, verify);
                            if(resp == true){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                                JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                            }
                            if(resp == false){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                                JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                            }
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == true){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            f1 = new FileWriter("src/Documentos/m_DESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_DES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_DES.txt", count);
                            System.out.println("-------DES and HASH decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = d1.DES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES DECRYPT && HASH", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                            ArrayList<String> verificacion = new ArrayList();
                            count = rf.contar("src/Documentos/m_DESd.txt");
                            verificacion = rf.resandkey("src/Documentos/m_DESd.txt", count);
                            String resultado2 = verificacion.get(0);
                            resultado2 = resultado2.substring(0, resultado2.length()-1);
                            System.out.println(resultado);
                            String hash = verificacion.get(1);
                            System.out.println("HASH: "+hash);
                            boolean resp = s1.verify(resultado2, hash);
                            if(resp == true){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                            }
                            if(resp == false){
                                //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                                JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                            }
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                    if(jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == false){
                        try{
                            r1.openFromDiskPrivateKey(key);
                            f1 = new FileWriter("src/Documentos/m_DESd.txt");
                            String resultado = rf.read(archivo);
                            ArrayList<String> parametros = new ArrayList();
                            int count = rf.contar("src/Documentos/m_key_iv_DES.txt");
                            parametros = rf.resandkey("src/Documentos/m_key_iv_DES.txt", count);
                            System.out.println("-------DES decrypt------");
                            String llave = parametros.get(0);
                            String iv = parametros.get(1);
                            String llaved = r1.Decrypt(llave);
                            String ivd = r1.Decrypt(iv);
                            System.out.println("IV descifrada: "+ivd);
                            String escribir = d1.DES_Decrypt(resultado, llaved, ivd);
                            System.out.println(escribir);
                            f1.write(escribir);
                            f1.close();
                            JOptionPane.showMessageDialog(null, "DES DECRYPT", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                        }
                        catch(Exception e){
                            String exception = e.toString();
                            //JOptionPane.showMessageDialog(null, exception);
                            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                        }
                    }
                }
            }
        }
        
        if(jRadioButton1.isSelected() == false && jRadioButton2.isSelected() == true && jRadioButton3.isSelected() == false){
            RSA r1 = new RSA();
            SHA1 s1 = new SHA1();
            Readfile rf = new Readfile();
            String mode = (String)jComboBox1.getSelectedItem();
            if(mode.equals("Encrypt")){
                try{
                    r1.openFromDiskPrivateKey(sign);
                    f1 = new FileWriter("src/Documentos/m_authentication.txt");
                    String resultado= rf.read(archivo);
                    String escribir = rf.read3(archivo);
                    System.out.println("----------ONLY SIGN------------");
                    String hash = s1.hash(resultado);
                    System.out.println("Hash sha1: " + hash);
                    String signature = r1.Sign(hash);
                    System.out.println("Signature: " + signature);
                    f1.write(escribir);
                    f1.write("\r\n\r\n");
                    f1.write(signature);
                    f1.close();
                    //JOptionPane.showMessageDialog(null, "Authentication Successful");
                    JOptionPane.showMessageDialog(null, "Authentication Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                }
                catch(Exception e){
                    String exception = e.toString();
                    //JOptionPane.showMessageDialog(null, exception);
                    JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                }
            }
            if(mode.equals("Decrypt")){
                try{
                    r1.openFromDiskPublicKey(sign);
                    ArrayList<String> parametros = new ArrayList();
                    System.out.println("----------ONLY SIGN Verification------------");
                    int count = rf.contar(archivo);
                    parametros = rf.resandkey(archivo, count);
                    String resultado = parametros.get(0);
                    resultado = resultado.substring(0, resultado.length()-1);
                    System.out.println(resultado);
                    String signature = parametros.get(1);
                    System.out.println("Sign: "+signature);
                    String verify = r1.Verify(signature);
                    System.out.println("Hash: "+verify);
                    boolean resp = s1.verify(resultado, verify);
                    if(resp == true){
                        //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                        JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                        JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                    }
                    if(resp == false){
                        //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                        JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                        JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                    }
                }
                catch(Exception e){
                    String exception = e.toString();
                    //JOptionPane.showMessageDialog(null, exception);
                    JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                }
            }
        }
        
        if(jRadioButton1.isSelected() == false && jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == true){
            SHA1 s1 = new SHA1();
            Readfile rf = new Readfile();
            String mode = (String)jComboBox1.getSelectedItem();
            if(mode.equals("Encrypt")){
                try{
                    f1 = new FileWriter("src/Documentos/m_digest.txt");
                    String resultado= rf.read(archivo);
                    String escribir = rf.read3(archivo);
                    System.out.println("----------ONLY HASH------------");
                    String hash = s1.hash(resultado);
                    System.out.println("Hash sha1: " + hash);
                    f1.write(escribir);
                    f1.write("\r\n\r\n");
                    f1.write(hash);
                    f1.close();
                    //JOptionPane.showMessageDialog(null, "Authentication Successful");
                    JOptionPane.showMessageDialog(null, "Integrity Successful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
                }
                catch(Exception e){
                    String exception = e.toString();
                    //JOptionPane.showMessageDialog(null, exception);
                    JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                }
            }
            if(mode.equals("Decrypt")){
                try{
                    ArrayList<String> parametros = new ArrayList();
                    System.out.println("----------ONLY HASH Verification------------");
                    int count = rf.contar(archivo);
                    parametros = rf.resandkey(archivo, count);
                    String resultado = parametros.get(0);
                    resultado = resultado.substring(0, resultado.length()-1);
                    System.out.println(resultado);
                    String hash = parametros.get(1);
                    System.out.println("HASH: "+hash);
                    boolean resp = s1.verify(resultado, hash);
                    if(resp == true){
                        //JOptionPane.showMessageDialog(null, "Authentication Successful\nThe message is not corrupted");
                        JOptionPane.showMessageDialog(null, "Integrity Successful\nThe message is Complete", "Successful", JOptionPane.INFORMATION_MESSAGE, feliz);
                    }
                    if(resp == false){
                        //JOptionPane.showMessageDialog(null, "Authentication Successful\nWarning message corrupted");
                        JOptionPane.showMessageDialog(null, "Integrity Successful\nWarning Something is missing", "Successful", JOptionPane.INFORMATION_MESSAGE, triste);
                    }
                }
                catch(Exception e){
                    String exception = e.toString();
                    //JOptionPane.showMessageDialog(null, exception);
                    JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
                }
            }
        }
        
        if(jRadioButton1.isSelected() == false && jRadioButton2.isSelected() == false && jRadioButton3.isSelected() == false){
            JOptionPane.showMessageDialog(null, "Please select a option", "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        RSA rsa1 = new RSA();
        try {
            rsa1.genKeyPair(1024);
            rsa1.saveToDiskPrivateKey("src/Keys/rsa.pri");
            rsa1.saveToDiskPublicKey("src/Keys/rsa.pub");
            //JOptionPane.showMessageDialog(null, "Generation sucessful");
            JOptionPane.showMessageDialog(null, "Generation sucessful", "Successful", JOptionPane.INFORMATION_MESSAGE, bien);
        } catch (Exception ex) {
            String exception = ex.toString();
            //JOptionPane.showMessageDialog(null, exception);
            JOptionPane.showMessageDialog(null, exception, "Warning", JOptionPane.INFORMATION_MESSAGE, mal);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_menu().setVisible(true);
            }
        });
    }

    private JPanel contentPane;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
