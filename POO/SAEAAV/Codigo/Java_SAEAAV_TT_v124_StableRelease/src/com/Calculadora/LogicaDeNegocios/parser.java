package com.Calculadora.LogicaDeNegocios;


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Sep 18 21:00:50 CDT 2014
//----------------------------------------------------

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Thu Sep 18 21:00:50 CDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\004\000\002\005\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\064\003\027\004\011\005\023\006\021\007" +
    "\020\011\032\012\037\017\026\020\006\021\031\022\010" +
    "\023\005\024\007\025\017\026\030\027\025\030\014\031" +
    "\035\032\036\033\024\034\015\035\013\036\004\037\034" +
    "\041\012\001\002\000\022\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\040\uffe3\001\002\000\004" +
    "\037\132\001\002\000\004\037\127\001\002\000\004\037" +
    "\124\001\002\000\004\037\121\001\002\000\022\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\040" +
    "\uffe8\001\002\000\022\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\040\uffdf\001\002\000\022\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\040\uffe4\001\002\000\004\037\116\001\002\000\004\037" +
    "\113\001\002\000\020\010\112\011\046\012\043\013\044" +
    "\014\042\015\045\016\041\001\002\000\004\037\107\001" +
    "\002\000\022\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\040\uffe5\001\002\000\022\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\040\uffe6" +
    "\001\002\000\066\002\105\003\027\004\011\005\023\006" +
    "\021\007\020\011\032\012\037\017\026\020\006\021\031" +
    "\022\010\023\005\024\007\025\017\026\030\027\025\030" +
    "\014\031\035\032\036\033\024\034\015\035\013\036\004" +
    "\037\034\041\012\001\002\000\022\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\040\uffe7\001\002" +
    "\000\004\037\102\001\002\000\004\037\077\001\002\000" +
    "\004\037\074\001\002\000\066\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\041\ufffd\001\002\000\004\037\071" +
    "\001\002\000\004\037\066\001\002\000\062\004\011\005" +
    "\023\006\021\007\020\011\032\012\037\017\026\020\006" +
    "\021\031\022\010\023\005\024\007\025\017\026\030\027" +
    "\025\030\014\031\035\032\036\033\024\034\015\035\013" +
    "\036\004\037\034\041\012\001\002\000\066\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\041\uffff\001\002\000" +
    "\062\004\011\005\023\006\021\007\020\011\032\012\037" +
    "\017\026\020\006\021\031\022\010\023\005\024\007\025" +
    "\017\026\030\027\025\030\014\031\035\032\036\033\024" +
    "\034\015\035\013\036\004\037\034\041\012\001\002\000" +
    "\004\037\060\001\002\000\004\037\055\001\002\000\062" +
    "\004\011\005\023\006\021\007\020\011\032\012\037\017" +
    "\026\020\006\021\031\022\010\023\005\024\007\025\017" +
    "\026\030\027\025\030\014\031\035\032\036\033\024\034" +
    "\015\035\013\036\004\037\034\041\012\001\002\000\022" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\040\uffe2\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\022\010\ufffc\011\ufffc\012\ufffc" +
    "\013\044\014\042\015\045\016\041\040\ufffc\001\002\000" +
    "\022\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\041\040\ufff8\001\002\000\022\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\041\040\ufffa\001\002" +
    "\000\022\010\ufffb\011\ufffb\012\ufffb\013\044\014\042\015" +
    "\045\016\041\040\ufffb\001\002\000\022\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\041\040\ufff9\001" +
    "\002\000\022\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\041\040\ufff7\001\002\000\062\004\011\005" +
    "\023\006\021\007\020\011\032\012\037\017\026\020\006" +
    "\021\031\022\010\023\005\024\007\025\017\026\030\027" +
    "\025\030\014\031\035\032\036\033\024\034\015\035\013" +
    "\036\004\037\034\041\012\001\002\000\020\011\046\012" +
    "\043\013\044\014\042\015\045\016\041\040\057\001\002" +
    "\000\022\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\040\uffec\001\002\000\062\004\011\005\023" +
    "\006\021\007\020\011\032\012\037\017\026\020\006\021" +
    "\031\022\010\023\005\024\007\025\017\026\030\027\025" +
    "\030\014\031\035\032\036\033\024\034\015\035\013\036" +
    "\004\037\034\041\012\001\002\000\020\011\046\012\043" +
    "\013\044\014\042\015\045\016\041\040\062\001\002\000" +
    "\022\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\040\uffed\001\002\000\020\011\046\012\043\013" +
    "\044\014\042\015\045\016\041\040\064\001\002\000\022" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\040\uffe0\001\002\000\022\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\040\uffe1\001\002\000" +
    "\062\004\011\005\023\006\021\007\020\011\032\012\037" +
    "\017\026\020\006\021\031\022\010\023\005\024\007\025" +
    "\017\026\030\027\025\030\014\031\035\032\036\033\024" +
    "\034\015\035\013\036\004\037\034\041\012\001\002\000" +
    "\020\011\046\012\043\013\044\014\042\015\045\016\041" +
    "\040\070\001\002\000\022\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\040\ufff4\001\002\000\062" +
    "\004\011\005\023\006\021\007\020\011\032\012\037\017" +
    "\026\020\006\021\031\022\010\023\005\024\007\025\017" +
    "\026\030\027\025\030\014\031\035\032\036\033\024\034" +
    "\015\035\013\036\004\037\034\041\012\001\002\000\020" +
    "\011\046\012\043\013\044\014\042\015\045\016\041\040" +
    "\073\001\002\000\022\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\040\uffef\001\002\000\062\004" +
    "\011\005\023\006\021\007\020\011\032\012\037\017\026" +
    "\020\006\021\031\022\010\023\005\024\007\025\017\026" +
    "\030\027\025\030\014\031\035\032\036\033\024\034\015" +
    "\035\013\036\004\037\034\041\012\001\002\000\020\011" +
    "\046\012\043\013\044\014\042\015\045\016\041\040\076" +
    "\001\002\000\022\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\040\ufff6\001\002\000\062\004\011" +
    "\005\023\006\021\007\020\011\032\012\037\017\026\020" +
    "\006\021\031\022\010\023\005\024\007\025\017\026\030" +
    "\027\025\030\014\031\035\032\036\033\024\034\015\035" +
    "\013\036\004\037\034\041\012\001\002\000\020\011\046" +
    "\012\043\013\044\014\042\015\045\016\041\040\101\001" +
    "\002\000\022\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\040\uffee\001\002\000\062\004\011\005" +
    "\023\006\021\007\020\011\032\012\037\017\026\020\006" +
    "\021\031\022\010\023\005\024\007\025\017\026\030\027" +
    "\025\030\014\031\035\032\036\033\024\034\015\035\013" +
    "\036\004\037\034\041\012\001\002\000\020\011\046\012" +
    "\043\013\044\014\042\015\045\016\041\040\104\001\002" +
    "\000\022\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\040\uffeb\001\002\000\004\002\000\001\002" +
    "\000\066\002\001\003\001\004\001\005\001\006\001\007" +
    "\001\011\001\012\001\017\001\020\001\021\001\022\001" +
    "\023\001\024\001\025\001\026\001\027\001\030\001\031" +
    "\001\032\001\033\001\034\001\035\001\036\001\037\001" +
    "\041\001\001\002\000\062\004\011\005\023\006\021\007" +
    "\020\011\032\012\037\017\026\020\006\021\031\022\010" +
    "\023\005\024\007\025\017\026\030\027\025\030\014\031" +
    "\035\032\036\033\024\034\015\035\013\036\004\037\034" +
    "\041\012\001\002\000\020\011\046\012\043\013\044\014" +
    "\042\015\045\016\041\040\111\001\002\000\022\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\040" +
    "\ufff0\001\002\000\066\002\ufffe\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\012\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\041\ufffe\001\002\000\062\004\011\005\023" +
    "\006\021\007\020\011\032\012\037\017\026\020\006\021" +
    "\031\022\010\023\005\024\007\025\017\026\030\027\025" +
    "\030\014\031\035\032\036\033\024\034\015\035\013\036" +
    "\004\037\034\041\012\001\002\000\020\011\046\012\043" +
    "\013\044\014\042\015\045\016\041\040\115\001\002\000" +
    "\022\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\040\uffea\001\002\000\062\004\011\005\023\006" +
    "\021\007\020\011\032\012\037\017\026\020\006\021\031" +
    "\022\010\023\005\024\007\025\017\026\030\027\025\030" +
    "\014\031\035\032\036\033\024\034\015\035\013\036\004" +
    "\037\034\041\012\001\002\000\020\011\046\012\043\013" +
    "\044\014\042\015\045\016\041\040\120\001\002\000\022" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\040\uffe9\001\002\000\062\004\011\005\023\006\021" +
    "\007\020\011\032\012\037\017\026\020\006\021\031\022" +
    "\010\023\005\024\007\025\017\026\030\027\025\030\014" +
    "\031\035\032\036\033\024\034\015\035\013\036\004\037" +
    "\034\041\012\001\002\000\020\011\046\012\043\013\044" +
    "\014\042\015\045\016\041\040\123\001\002\000\022\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\040\ufff3\001\002\000\062\004\011\005\023\006\021\007" +
    "\020\011\032\012\037\017\026\020\006\021\031\022\010" +
    "\023\005\024\007\025\017\026\030\027\025\030\014\031" +
    "\035\032\036\033\024\034\015\035\013\036\004\037\034" +
    "\041\012\001\002\000\020\011\046\012\043\013\044\014" +
    "\042\015\045\016\041\040\126\001\002\000\022\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\040" +
    "\ufff1\001\002\000\062\004\011\005\023\006\021\007\020" +
    "\011\032\012\037\017\026\020\006\021\031\022\010\023" +
    "\005\024\007\025\017\026\030\027\025\030\014\031\035" +
    "\032\036\033\024\034\015\035\013\036\004\037\034\041" +
    "\012\001\002\000\020\011\046\012\043\013\044\014\042" +
    "\015\045\016\041\040\131\001\002\000\022\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\040\ufff5" +
    "\001\002\000\062\004\011\005\023\006\021\007\020\011" +
    "\032\012\037\017\026\020\006\021\031\022\010\023\005" +
    "\024\007\025\017\026\030\027\025\030\014\031\035\032" +
    "\036\033\024\034\015\035\013\036\004\037\034\041\012" +
    "\001\002\000\020\011\046\012\043\013\044\014\042\015" +
    "\045\016\041\040\134\001\002\000\022\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\040\ufff2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\010\003\015\004\021\005\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\015\005\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\064\001\001\000\002\001\001\000\004\003" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\037\001\001\000\002\001\001\000\004\003\053\001" +
    "\001\000\004\003\052\001\001\000\004\003\051\001\001" +
    "\000\004\003\050\001\001\000\004\003\047\001\001\000" +
    "\004\003\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\132\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private double varX=0.0;
    private double varY=0.0;
    private double varZ=0.0;
    /** Action encapsulation object initializer. This is from SAEAAV. Remove others. */
    protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
      action_obj.setVarX(this.varX);
      action_obj.setVarY(this.varY);
      action_obj.setVarZ(this.varZ);
    }
    public void setVarX(double valorX) 
    {
        this.varX = valorX;
    }
    public void setVarY(double valorY) 
    {
        this.varY = valorY;
    }
    public void setVarZ(double valorZ) 
    {
        this.varZ = valorZ;
    }
    public static parser Principal(String pathArchivo) 
    {
        //Variables
        parser objparser=null;
        
        //Nos aseguramos de que todo salga bien
        try
        {
            //Leemos el archivo de entrada...
            Reader reader = new BufferedReader(new FileReader(pathArchivo));
            
            //Leemos con el analizador
            objparser=new parser(new scanner(reader));
            
            //Ejecutamos el anÃ¡lisis
            objparser.parse();
        }
        catch(Exception ex)
        {
            return objparser;
            //ex.printStackTrace();
        }
        
        //Retornamos el resultado
        return objparser;
    }
    public static parser PrincipalRecibeContenidoDirecto(String contenido) 
    {
        //Variables
        String str = contenido;
        parser objparser=null;
        InputStream is;
        BufferedReader br;
        
        //Nos aseguramos de que todo salga bien
        try
        {
            //Realizamos el proceso de conversiÃ³n
            is = new ByteArrayInputStream(str.getBytes());
            br = new BufferedReader(new InputStreamReader(is));

            //Leemos el contenido de entrada...
            Reader reader = br;
            
            //Leemos con el analizador
            objparser=new parser(new scanner(reader));
            
            //Ejecutamos el anÃ¡lisis
            objparser.parse();
        }
        catch(Exception ex)
        {
            return objparser;
            //ex.printStackTrace();
        }
        
        //Retornamos el resultado
        return objparser;
    }
    public static parser PrincipalRecibeContenidoDirecto(String contenido, double valorX, double valorY, double valorZ) 
    {
        //Variables
        String str = contenido;
        parser objparser=null;
        InputStream is;
        BufferedReader br;
        
        //Nos aseguramos de que todo salga bien
        try
        {
            //Realizamos el proceso de conversiÃ³n
            is = new ByteArrayInputStream(str.getBytes());
            br = new BufferedReader(new InputStreamReader(is));

            //Leemos el contenido de entrada...
            Reader reader = br;
            
            //Leemos con el analizador
            objparser=new parser(new scanner(reader));
            
            //Ajustamos atributos
            objparser.setVarX(valorX);
            objparser.setVarY(valorY);
            objparser.setVarZ(valorZ);
            
            //Ejecutamos el anÃ¡lisis
            objparser.parse();
        }
        catch(Exception ex)
        {
            return objparser;
            //ex.printStackTrace();
        }
        
        //Retornamos el resultado
        return objparser;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 
    private double varX=0.0;
    private double varY=0.0;
    private double varZ=0.0;
    private String valor="";
    private Boolean esError=false;
    private String mensajeError="";
    private ArrayList<String> listaDeValores=new ArrayList<>();
    private ArrayList<Boolean> listaDeTiposDeValores_esError=new ArrayList<>();
    public void ImprimeValor()
    {
       //System.out.println("----------------------------------------------------");
       //System.out.println("parser::MSG::ImprimeValor::esError="+esError);
       this.listaDeTiposDeValores_esError.add(esError);
       if(!esError)
       {
        //System.out.println("parser::MSG::ImprimeValor::this.listaDeValores.add="+valor);
        this.listaDeValores.add(valor);
       }
       else
       {
        //System.out.println("parser::MSG::ImprimeValor::this.listaDeValores.add="+mensajeError);
        this.listaDeValores.add(mensajeError);
       }
       valor="";
       mensajeError="";
       esError=false;
       //System.out.println("----------------------------------------------------");
    }
    public ArrayList<String> getListaDeValores()
    {
        return listaDeValores;
    } 
    public ArrayList<Boolean> getListaDeTiposDeValores_esError()
    {
        return listaDeTiposDeValores_esError;
    }
    public void setVarX(double valorX) 
    {
        this.varX = valorX;
    }
    public void setVarY(double valorY) 
    {
        this.varY = valorY;
    }
    public void setVarZ(double valorZ) 
    {
        this.varZ = valorZ;
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= TKN_ERROR 
            {
              Double RESULT = null;
		  
                if(!esError)
                {
                    //System.out.println("----------------------------------------------------");
                    //System.out.println("-->ERROR");
                    esError=true;
                    mensajeError+="Resultado indeterminado.";
                    //System.out.println("->ERROR="+mensajeError);
                    //System.out.println("----------------------------------------------------");
                }
                RESULT = new Double(0.0);
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(e1.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= TKN_MAS Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(0 + e1.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= TKN_MENOS Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(0 - e1.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= TKN_E 
            {
              Double RESULT = null;
		 RESULT = Math.E; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= TKN_PI 
            {
              Double RESULT = null;
		 RESULT = Math.PI; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= TKN_VARZ 
            {
              Double RESULT = null;
		 RESULT = new Double(varZ); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= TKN_VARY 
            {
              Double RESULT = null;
		 RESULT = new Double(varY); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= TKN_VARX 
            {
              Double RESULT = null;
		
                 RESULT = new Double(varX);
                 //System.out.println("->varX="+varX);
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= TKN_NUMREAL 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.doubleValue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= TKN_LOG TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.log(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= TKN_EXP TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.exp(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= TKN_DEG TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.toDegrees(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= TKN_RAD TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.toRadians(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expresion ::= TKN_SQRT TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if(e1.doubleValue()>=0)
                {
                    RESULT = new Double(Math.sqrt(e1.doubleValue()));
                }
                else
                {
                    if(!esError)
                    {
                        //System.out.println("----------------------------------------------------");
                        //System.out.println("-->RAIZ DE NUMERO NEGATIVO");
                        esError=true;
                        mensajeError+="Resultado indeterminado.";
                        //System.out.println("->ERROR="+mensajeError);
                        //System.out.println("----------------------------------------------------");
                    }
                    RESULT = new Double(e1.doubleValue());
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= TKN_ARCTAN TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if( !(e1.doubleValue()==90 || e1.doubleValue()==270) )
                {
                    RESULT = new Double(Math.atan(e1.doubleValue()));
                }
                else
                {
                    if(!esError)
                    {
                        //System.out.println("----------------------------------------------------");
                        //System.out.println("-->ARCO TANGENTE DE 90 Ã³ 270");
                        esError=true;
                        mensajeError+="Resultado indeterminado.";
                        //System.out.println("->ERROR="+mensajeError);
                        //System.out.println("----------------------------------------------------");
                    }
                    RESULT = new Double(e1.doubleValue());
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= TKN_ARCCOS TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.acos(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= TKN_ARCSEN TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.asin(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expresion ::= TKN_TANH TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if( !(e1.doubleValue()==90 || e1.doubleValue()==270) )
                {
                    RESULT = new Double(Math.tanh(e1.doubleValue()));
                }
                else
                {
                    if(!esError)
                    {
                        //System.out.println("----------------------------------------------------");
                        //System.out.println("-->TANGENTE HIPERBOLICA DE 90 Ã³ 270");
                        esError=true;
                        mensajeError+="Resultado indeterminado.";
                        //System.out.println("->ERROR="+mensajeError);
                        //System.out.println("----------------------------------------------------");
                    }
                    RESULT = new Double(e1.doubleValue());
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= TKN_COSH TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.cosh(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= TKN_SENH TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.sinh(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= TKN_TAN TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if( !(e1.doubleValue()==90 || e1.doubleValue()==270) )
                {
                    RESULT = new Double(Math.tan(e1.doubleValue()));
                }
                else
                {
                    if(!esError)
                    {
                        //System.out.println("----------------------------------------------------");
                        //System.out.println("-->TANGENTE DE 90 Ã³ 270");
                        esError=true;
                        mensajeError+="Resultado indeterminado.";
                        //System.out.println("->ERROR="+mensajeError);
                        //System.out.println("----------------------------------------------------");
                    }
                    RESULT = new Double(e1.doubleValue());
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= TKN_COS TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.cos(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= TKN_SEN TKN_PABRE Expresion TKN_PCIERRA 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.sin(e1.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expresion ::= Expresion TKN_POT Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(Math.pow(e1.doubleValue(),e2.doubleValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expresion ::= Expresion TKN_MOD Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() % e2.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expresion ::= Expresion TKN_DIV Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                if(e2.doubleValue()>0.0)
                {
                    RESULT = new Double(e1.doubleValue() / e2.doubleValue());
                }
                else
                {
                    if(!esError)
                    {
                        //System.out.println("----------------------------------------------------");
                        //System.out.println("-->DIVISION ENTRE 0");
                        esError=true;
                        mensajeError+="Resultado indeterminado.";
                        //System.out.println("->ERROR="+mensajeError);
                        //System.out.println("----------------------------------------------------");
                    }
                    RESULT = new Double(e1.doubleValue());
                }
              
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expresion ::= Expresion TKN_MULT Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() * e2.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expresion ::= Expresion TKN_MENOS Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() - e2.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expresion ::= Expresion TKN_MAS Expresion 
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() + e2.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Evaluador ::= error 
            {
              Object RESULT = null;
		 
                //System.out.println("----------------------------------------------------");
                //System.out.println("-->error");
                esError=true;
                mensajeError+="Linea mal escrita.";
                ImprimeValor();
                //System.out.println("->ERROR=Linea mal escrita.");
                //System.out.println("----------------------------------------------------");
              
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Evaluador*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Evaluador ::= Expresion TKN_PTOCOMA 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                //System.out.println("----------------------------------------------------");
                //System.out.println("-->Expresion:e TKN_PTOCOMA");
                //System.out.println("esError="+esError);
                if(!esError)
                {
                    //System.out.println("if-true");
                    valor=""+e;
                    ImprimeValor();
                }
                if(esError)
                {
                    //System.out.println("if-false");
                    ImprimeValor();
                }
                //System.out.println("----------------------------------------------------");
              
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Evaluador*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= Evaluador 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Inicio ::= Inicio Evaluador 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

